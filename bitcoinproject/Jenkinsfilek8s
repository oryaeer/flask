def performKubernetesApply(clusterName) {
    // Apply Flask app deployment
    sh """
    gcloud container clusters get-credentials ${clusterName} --project cool-evening-393307 --region us-central1
    """

    sh """
    kubectl apply -f /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject/flask-app-deployment.yaml
    """

    // Apply Flask app service
    sh """
    kubectl apply -f /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject/flask-app-service.yaml
    """

    // Apply deploy service
    sh """
    kubectl apply -f /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject/deployservice.yaml
    """

    // Sleep for a few seconds to allow the application to start
    sleep 20
}

pipeline {
    agent any

    stages {
        stage('Cleanup') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'oryaeer-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    echo "Switching to oryaeer user and performing cleanup..."
                    sh """
                    echo $PASSWORD | sudo -S -u oryaeer bash -c '
                        whoami
                        docker rmi -f oryaeer/flaskapp:new
                    '
                    """
                }
            }
        }

        stage('Build And Push The Image To Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'oryaeer-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                        // Switch to oryaeer user and execute Docker build and push commands
                        sh """
                        echo \$PASSWORD | sudo -S -u oryaeer bash -c '
                            cd /home/oryaeer/Desktop/flask/bitcoinproject
                            git pull
                            pwd
                            docker build --tag oryaeer/flaskapp:new .
                            docker push oryaeer/flaskapp:new
                        '
                        """
                    }
                }
            }
        }

        stage('Apply Kubernetes Manifests on test server') {
            steps {
                echo "Applying Kubernetes manifests..."

                // Define the path for the destination directory
                script {
                    def destDir = "/var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject"

                    // Check if the directory exists
                    sh """
                    if [ ! -d ${destDir} ]; then
                        sudo git clone https://github.com/oryaeer/flask.git /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject
                    else
                        echo \"Directory already exists. Skipping git clone.\"
                    fi
                    """

                    // Call the function to perform Kubernetes apply
                    performKubernetesApply("autopilot-cluster-1")

                    // Wait until the deployment and service are ready
                    sh """
                    echo \"Waiting for deployment and service to be ready on autopilot-cluster-1...\"
                    kubectl rollout status deployment/flask-app-deployment
                    kubectl wait --for=condition=ready pod -l app=flask-app
                    kubectl wait --for=condition=available deployment/flask-app-deployment
                    """
                    sh "sleep 45"
                }
            }
        }

        stage('Test Website') {
            steps {
                // Test the website on the IP provided by Kubernetes service
                echo "Testing website..."
                sh """
                CLUSTER_IP=\$(kubectl get service flask-app-service -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
                # Check if CLUSTER_IP is empty, if it is, exit the script
                if [ -z "\$CLUSTER_IP" ]; then
                    echo \"Error: LoadBalancer IP not found. Exiting...\"
                    exit 1
                fi

                status_code=\$(curl -sL -w \"%{http_code}\" \"http://\$CLUSTER_IP:5000\" -o /dev/null)
                if [ \$status_code -eq 200 ]; then
                    echo \"Website is working fine\"
                else
                    echo \"Website is not responding with 200 OK\"
                fi
                """
            }
        }

        stage('Cleanup Kubernetes Resources on test server') {
            steps {
                // Delete Kubernetes resources
                sh """
                kubectl delete -f /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject/flask-app-deployment.yaml
                kubectl delete -f /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject/flask-app-service.yaml
                kubectl delete -f /var/lib/jenkins/workspace/docker_pipeline/k8s/bitcoinproject/deployservice.yaml
                """
            }
        }

        // New stage to apply Kubernetes manifests on autopilot-cluster-2
        stage('Apply Kubernetes Manifests on autopilot-cluster-2') {
            steps {
                echo "Applying Kubernetes manifests on autopilot-cluster-2..."

                // Call the function to perform Kubernetes apply for autopilot-cluster-2
                performKubernetesApply("autopilot-cluster-2")

                // Wait until all pods are in the "Running" state
                sh """
                echo \"Waiting for all pods to be running on autopilot-cluster-2...\"
                kubectl wait --for=condition=ready pod -l app=flask-app -n default
                kubectl wait --for=condition=ready pod -l app=redis-db -n default
                """
                
                // Get Load Balancer IP
                sh """
                CLUSTER_IP=\$(kubectl get service flask-app-service -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
                # Check if CLUSTER_IP is empty, if it is, exit the script
                if [ -z "\$CLUSTER_IP" ]; then
                    echo \"Error: LoadBalancer IP not found. Exiting...\"
                    exit 1
                fi

                echo \"Load Balancer IP: \$CLUSTER_IP\"
                echo \"Website is running\"
                """
            }
        }
    }
}
